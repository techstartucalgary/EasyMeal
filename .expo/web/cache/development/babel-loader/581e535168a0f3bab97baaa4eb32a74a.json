{"ast":null,"code":"var rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'far', 'glk', 'he', 'iw', 'khw', 'ks', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);\nvar cache = new Map();\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n\n  var isRTL = false;\n\n  if (Intl.Locale) {\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n\n  cache.set(locale, isRTL);\n  return isRTL;\n}","map":{"version":3,"sources":["/Users/nemanjagrujic/Desktop/Projects 2022/EasyMeal/node_modules/react-native-web/dist/modules/useLocale/isLocaleRTL.js"],"names":["rtlScripts","Set","rtlLangs","cache","Map","isLocaleRTL","locale","cachedRTL","get","isRTL","Intl","Locale","script","maximize","has","lang","split","set"],"mappings":"AAQA,IAAIA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,CAAR,CAAjB;AACA,IAAIC,QAAQ,GAAG,IAAID,GAAJ,CAAQ,CAAC,IAAD,EACvB,IADuB,EAEvB,KAFuB,EAGvB,KAHuB,EAIvB,KAJuB,EAKvB,KALuB,EAMvB,IANuB,EAOvB,IAPuB,EAOjB,KAPiB,EAQvB,KARuB,EASvB,IATuB,EASjB,IATiB,EAUvB,KAVuB,EAWvB,IAXuB,EAYvB,IAZuB,EAavB,KAbuB,EAcvB,KAduB,EAevB,KAfuB,EAgBvB,IAhBuB,EAiBvB,IAjBuB,EAkBvB,IAlBuB,EAmBvB,IAnBuB,EAoBvB,IApBuB,CAAR,CAAf;AAsBA,IAAIE,KAAK,GAAG,IAAIC,GAAJ,EAAZ;AAKA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClC,MAAIC,SAAS,GAAGJ,KAAK,CAACK,GAAN,CAAUF,MAAV,CAAhB;;AAEA,MAAIC,SAAJ,EAAe;AACb,WAAOA,SAAP;AACD;;AAED,MAAIE,KAAK,GAAG,KAAZ;;AAEA,MAAIC,IAAI,CAACC,MAAT,EAAiB;AAEf,QAAIC,MAAM,GAAG,IAAIF,IAAI,CAACC,MAAT,CAAgBL,MAAhB,EAAwBO,QAAxB,GAAmCD,MAAhD;AACAH,IAAAA,KAAK,GAAGT,UAAU,CAACc,GAAX,CAAeF,MAAf,CAAR;AACD,GAJD,MAIO;AAEL,QAAIG,IAAI,GAAGT,MAAM,CAACU,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAX;AACAP,IAAAA,KAAK,GAAGP,QAAQ,CAACY,GAAT,CAAaC,IAAb,CAAR;AACD;;AAEDZ,EAAAA,KAAK,CAACc,GAAN,CAAUX,MAAV,EAAkBG,KAAlB;AACA,SAAOA,KAAP;AACD","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae', // Avestan\n'ar', // Arabic\n'arc', // Aramaic\n'bcc', // Southern Balochi\n'bqi', // Bakthiari\n'ckb', // Sorani\n'dv', // Dhivehi\n'fa', 'far', // Persian\n'glk', // Gilaki\n'he', 'iw', // Hebrew\n'khw', // Khowar\n'ks', // Kashmiri\n'ku', // Kurdish\n'mzn', // Mazanderani\n'nqo', // N'Ko\n'pnb', // Western Punjabi\n'ps', // Pashto\n'sd', // Sindhi\n'ug', // Uyghur\n'ur', // Urdu\n'yi' // Yiddish\n]);\nvar cache = new Map();\n/**\n * Determine the writing direction of a locale\n */\n\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n\n  var isRTL = false; // $FlowFixMe\n\n  if (Intl.Locale) {\n    // $FlowFixMe\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    // Fallback to inferring from language\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n\n  cache.set(locale, isRTL);\n  return isRTL;\n}"]},"metadata":{},"sourceType":"module"}