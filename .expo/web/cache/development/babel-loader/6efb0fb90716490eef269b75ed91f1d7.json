{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nvar startNativeAnimationNextId = 1;\n\nvar Animation = function () {\n  function Animation() {\n    _classCallCheck(this, Animation);\n  }\n\n  _createClass(Animation, [{\n    key: \"start\",\n    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.__nativeId) {\n        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n      }\n    }\n  }, {\n    key: \"__getNativeAnimationConfig\",\n    value: function __getNativeAnimationConfig() {\n      throw new Error('This animation type cannot be offloaded to native');\n    }\n  }, {\n    key: \"__debouncedOnEnd\",\n    value: function __debouncedOnEnd(result) {\n      var onEnd = this.__onEnd;\n      this.__onEnd = null;\n      onEnd && onEnd(result);\n    }\n  }, {\n    key: \"__startNativeAnimation\",\n    value: function __startNativeAnimation(animatedValue) {\n      var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n      startNativeAnimationNextId += 1;\n      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n      try {\n        animatedValue.__makeNative();\n\n        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n      } catch (e) {\n        throw e;\n      } finally {\n        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n      }\n    }\n  }]);\n\n  return Animation;\n}();\n\nexport default Animation;","map":{"version":3,"sources":["/Users/nemanjagrujic/Desktop/Projects 2022/EasyMeal/node_modules/react-native-web/dist/vendor/react-native/Animated/animations/Animation.js"],"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__nativeId","API","stopAnimation","Error","result","__onEnd","startNativeAnimationWaitId","setWaitingForIdentifier","__makeNative","generateNewAnimationId","startAnimatingNode","__getNativeTag","__getNativeAnimationConfig","__debouncedOnEnd","bind","e","unsetWaitingForIdentifier"],"mappings":"AASA;;;;AAEA,OAAOA,oBAAP;AACA,IAAIC,0BAA0B,GAAG,CAAjC;;IAIMC,S;;;;;;;WACJ,eAAMC,SAAN,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,iBAAlC,EAAqDC,aAArD,EAAoE,CAAE;;;WAEtE,gBAAO;AACL,UAAI,KAAKC,UAAT,EAAqB;AACnBR,QAAAA,oBAAoB,CAACS,GAArB,CAAyBC,aAAzB,CAAuC,KAAKF,UAA5C;AACD;AACF;;;WAED,sCAA6B;AAG3B,YAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACD;;;WAGD,0BAAiBC,MAAjB,EAAyB;AACvB,UAAIP,KAAK,GAAG,KAAKQ,OAAjB;AACA,WAAKA,OAAL,GAAe,IAAf;AACAR,MAAAA,KAAK,IAAIA,KAAK,CAACO,MAAD,CAAd;AACD;;;WAED,gCAAuBL,aAAvB,EAAsC;AACpC,UAAIO,0BAA0B,GAAGb,0BAA0B,GAAG,iBAA9D;AACAA,MAAAA,0BAA0B,IAAI,CAA9B;AACAD,MAAAA,oBAAoB,CAACS,GAArB,CAAyBM,uBAAzB,CAAiDD,0BAAjD;;AAEA,UAAI;AACFP,QAAAA,aAAa,CAACS,YAAd;;AAEA,aAAKR,UAAL,GAAkBR,oBAAoB,CAACiB,sBAArB,EAAlB;AACAjB,QAAAA,oBAAoB,CAACS,GAArB,CAAyBS,kBAAzB,CAA4C,KAAKV,UAAjD,EAA6DD,aAAa,CAACY,cAAd,EAA7D,EAA6F,KAAKC,0BAAL,EAA7F,EAAgI,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAhI;AACD,OALD,CAKE,OAAOC,CAAP,EAAU;AACV,cAAMA,CAAN;AACD,OAPD,SAOU;AACRvB,QAAAA,oBAAoB,CAACS,GAArB,CAAyBe,yBAAzB,CAAmDV,0BAAnD;AACD;AACF;;;;;;AAIH,eAAeZ,SAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar startNativeAnimationNextId = 1; // Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\n\nclass Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig() {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  } // Helper function for subclasses to make sure onEnd is only called once.\n\n\n  __debouncedOnEnd(result) {\n    var onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __startNativeAnimation(animatedValue) {\n    var startNativeAnimationWaitId = startNativeAnimationNextId + \":startAnimation\";\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n\n    try {\n      animatedValue.__makeNative();\n\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n\n}\n\nexport default Animation;"]},"metadata":{},"sourceType":"module"}