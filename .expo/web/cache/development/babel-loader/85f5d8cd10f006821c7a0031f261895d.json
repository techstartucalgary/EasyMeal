{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport InteractionManager from \"../../../exports/InteractionManager\";\n\nvar Batchinator = function () {\n  function Batchinator(callback, delayMS) {\n    _classCallCheck(this, Batchinator);\n\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n\n  _createClass(Batchinator, [{\n    key: \"dispose\",\n    value: function dispose(options) {\n      if (options === void 0) {\n        options = {\n          abort: false\n        };\n      }\n\n      if (this._taskHandle) {\n        this._taskHandle.cancel();\n\n        if (!options.abort) {\n          this._callback();\n        }\n\n        this._taskHandle = null;\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this = this;\n\n      if (this._taskHandle) {\n        return;\n      }\n\n      var timeoutHandle = setTimeout(function () {\n        _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n          _this._taskHandle = null;\n\n          _this._callback();\n        });\n      }, this._delay);\n      this._taskHandle = {\n        cancel: function cancel() {\n          return clearTimeout(timeoutHandle);\n        }\n      };\n    }\n  }]);\n\n  return Batchinator;\n}();\n\nexport default Batchinator;","map":{"version":3,"sources":["/Users/nemanjagrujic/Desktop/Projects 2022/EasyMeal/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"names":["InteractionManager","Batchinator","callback","delayMS","_delay","_callback","options","abort","_taskHandle","cancel","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"mappings":"AASA;;;;AAEA,OAAOA,kBAAP;;IAwBMC,W;AACJ,uBAAYC,QAAZ,EAAsBC,OAAtB,EAA+B;AAAA;;AAC7B,SAAKC,MAAL,GAAcD,OAAd;AACA,SAAKE,SAAL,GAAiBH,QAAjB;AACD;;;;WASD,iBAAQI,OAAR,EAAiB;AACf,UAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,QAAAA,OAAO,GAAG;AACRC,UAAAA,KAAK,EAAE;AADC,SAAV;AAGD;;AAED,UAAI,KAAKC,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBC,MAAjB;;AAEA,YAAI,CAACH,OAAO,CAACC,KAAb,EAAoB;AAClB,eAAKF,SAAL;AACD;;AAED,aAAKG,WAAL,GAAmB,IAAnB;AACD;AACF;;;WAED,oBAAW;AAAA;;AACT,UAAI,KAAKA,WAAT,EAAsB;AACpB;AACD;;AAED,UAAIE,aAAa,GAAGC,UAAU,CAAC,YAAM;AACnC,QAAA,KAAI,CAACH,WAAL,GAAmBR,kBAAkB,CAACY,oBAAnB,CAAwC,YAAM;AAG/D,UAAA,KAAI,CAACJ,WAAL,GAAmB,IAAnB;;AAEA,UAAA,KAAI,CAACH,SAAL;AACD,SANkB,CAAnB;AAOD,OAR6B,EAQ3B,KAAKD,MARsB,CAA9B;AASA,WAAKI,WAAL,GAAmB;AACjBC,QAAAA,MAAM,EAAE;AAAA,iBAAMI,YAAY,CAACH,aAAD,CAAlB;AAAA;AADS,OAAnB;AAGD;;;;;;AAIH,eAAeT,WAAf","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\n * interactions are done running.\n *\n * Make sure to cleanup with dispose().  Example:\n *\n *   class Widget extends React.Component {\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\n *     _saveSate() {\n *       // save this.state to disk\n *     }\n *     componentDidUpdate() {\n *       this._batchedSave.schedule();\n *     }\n *     componentWillUnmount() {\n *       this._batchedSave.dispose();\n *     }\n *     ...\n *   }\n */\n\nclass Batchinator {\n  constructor(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\n   * Cleanup any pending tasks.\n   *\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\n   * true to not call the callback if it was pending.\n   */\n\n\n  dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n\n      if (!options.abort) {\n        this._callback();\n      }\n\n      this._taskHandle = null;\n    }\n  }\n\n  schedule() {\n    if (this._taskHandle) {\n      return;\n    }\n\n    var timeoutHandle = setTimeout(() => {\n      this._taskHandle = InteractionManager.runAfterInteractions(() => {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        this._taskHandle = null;\n\n        this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: () => clearTimeout(timeoutHandle)\n    };\n  }\n\n}\n\nexport default Batchinator;"]},"metadata":{},"sourceType":"module"}