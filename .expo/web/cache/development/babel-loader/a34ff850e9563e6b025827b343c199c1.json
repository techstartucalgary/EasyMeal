{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport DevLoadingViewNativeModule from \"./DevLoadingViewNativeModule\";\nimport { getInitialSafeArea } from \"./getInitialSafeArea\";\nexport default function DevLoadingView() {\n  var _useState = useState('Refreshing...'),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDevLoading = _useState4[0],\n      setIsDevLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isAnimating = _useState6[0],\n      setIsAnimating = _useState6[1];\n\n  var translateY = useRef(new Animated.Value(0)).current;\n  var emitter = useMemo(function () {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error('Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' + error.message);\n    }\n  }, []);\n  useEffect(function () {\n    if (!emitter) return;\n\n    function handleShowMessage(event) {\n      setMessage(event.message);\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web'\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    var showMessageSubscription = emitter.addListener('devLoadingView:showMessage', handleShowMessage);\n    var hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return React.createElement(Animated.View, {\n    style: [styles.animatedContainer, {\n      transform: [{\n        translateY: translateY\n      }]\n    }],\n    pointerEvents: \"none\"\n  }, React.createElement(View, {\n    style: styles.banner\n  }, React.createElement(View, {\n    style: styles.contentContainer\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    }\n  }, React.createElement(Text, {\n    style: styles.text\n  }, message)), React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(Text, {\n    style: styles.subtitle\n  }, isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\")))));\n}\nvar styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42\n  },\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center'\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)'\n  }\n});","map":{"version":3,"sources":["../../src/environment/DevLoadingView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}