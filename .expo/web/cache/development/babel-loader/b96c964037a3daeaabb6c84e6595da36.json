{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar dataUriPattern = /^data:/;\nexport var ImageUriCache = function () {\n  function ImageUriCache() {\n    _classCallCheck(this, ImageUriCache);\n  }\n\n  _createClass(ImageUriCache, null, [{\n    key: \"has\",\n    value: function has(uri) {\n      var entries = ImageUriCache._entries;\n      var isDataUri = dataUriPattern.test(uri);\n      return isDataUri || Boolean(entries[uri]);\n    }\n  }, {\n    key: \"add\",\n    value: function add(uri) {\n      var entries = ImageUriCache._entries;\n      var lastUsedTimestamp = Date.now();\n\n      if (entries[uri]) {\n        entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n        entries[uri].refCount += 1;\n      } else {\n        entries[uri] = {\n          lastUsedTimestamp: lastUsedTimestamp,\n          refCount: 1\n        };\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(uri) {\n      var entries = ImageUriCache._entries;\n\n      if (entries[uri]) {\n        entries[uri].refCount -= 1;\n      }\n\n      ImageUriCache._cleanUpIfNeeded();\n    }\n  }, {\n    key: \"_cleanUpIfNeeded\",\n    value: function _cleanUpIfNeeded() {\n      var entries = ImageUriCache._entries;\n      var imageUris = Object.keys(entries);\n\n      if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n        var leastRecentlyUsedKey;\n        var leastRecentlyUsedEntry;\n        imageUris.forEach(function (uri) {\n          var entry = entries[uri];\n\n          if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n            leastRecentlyUsedKey = uri;\n            leastRecentlyUsedEntry = entry;\n          }\n        });\n\n        if (leastRecentlyUsedKey) {\n          delete entries[leastRecentlyUsedKey];\n        }\n      }\n    }\n  }]);\n\n  return ImageUriCache;\n}();\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nvar id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort: function abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = null;\n      image.onload = null;\n      image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n  getSize: function getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n  has: function has(uri) {\n    return ImageUriCache.has(uri);\n  },\n  load: function load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = function (e) {\n      var onDecode = function onDecode() {\n        return onLoad({\n          nativeEvent: e\n        });\n      };\n\n      if (typeof image.decode === 'function') {\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n  prefetch: function prefetch(uri) {\n    return new Promise(function (resolve, reject) {\n      ImageLoader.load(uri, function () {\n        ImageUriCache.add(uri);\n        ImageUriCache.remove(uri);\n        resolve();\n      }, reject);\n    });\n  },\n  queryCache: function queryCache(uris) {\n    var result = {};\n    uris.forEach(function (u) {\n      if (ImageUriCache.has(u)) {\n        result[u] = 'disk/memory';\n      }\n    });\n    return Promise.resolve(result);\n  }\n};\nexport default ImageLoader;","map":{"version":3,"sources":["/Users/nemanjagrujic/Desktop/Projects 2022/EasyMeal/node_modules/react-native-web/dist/modules/ImageLoader/index.js"],"names":["dataUriPattern","ImageUriCache","uri","entries","_entries","isDataUri","test","Boolean","lastUsedTimestamp","Date","now","refCount","_cleanUpIfNeeded","imageUris","Object","keys","length","_maximumEntries","leastRecentlyUsedKey","leastRecentlyUsedEntry","forEach","entry","id","requests","ImageLoader","abort","requestId","image","onerror","onload","getSize","success","failure","complete","interval","setInterval","callback","load","errorCallback","naturalHeight","naturalWidth","clearInterval","has","onLoad","onError","window","Image","e","onDecode","nativeEvent","decode","then","setTimeout","src","prefetch","Promise","resolve","reject","add","remove","queryCache","uris","result","u"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar dataUriPattern = /^data:/;\nexport class ImageUriCache {\n  static has(uri) {\n    var entries = ImageUriCache._entries;\n    var isDataUri = dataUriPattern.test(uri);\n    return isDataUri || Boolean(entries[uri]);\n  }\n\n  static add(uri) {\n    var entries = ImageUriCache._entries;\n    var lastUsedTimestamp = Date.now();\n\n    if (entries[uri]) {\n      entries[uri].lastUsedTimestamp = lastUsedTimestamp;\n      entries[uri].refCount += 1;\n    } else {\n      entries[uri] = {\n        lastUsedTimestamp,\n        refCount: 1\n      };\n    }\n  }\n\n  static remove(uri) {\n    var entries = ImageUriCache._entries;\n\n    if (entries[uri]) {\n      entries[uri].refCount -= 1;\n    } // Free up entries when the cache is \"full\"\n\n\n    ImageUriCache._cleanUpIfNeeded();\n  }\n\n  static _cleanUpIfNeeded() {\n    var entries = ImageUriCache._entries;\n    var imageUris = Object.keys(entries);\n\n    if (imageUris.length + 1 > ImageUriCache._maximumEntries) {\n      var leastRecentlyUsedKey;\n      var leastRecentlyUsedEntry;\n      imageUris.forEach(uri => {\n        var entry = entries[uri];\n\n        if ((!leastRecentlyUsedEntry || entry.lastUsedTimestamp < leastRecentlyUsedEntry.lastUsedTimestamp) && entry.refCount === 0) {\n          leastRecentlyUsedKey = uri;\n          leastRecentlyUsedEntry = entry;\n        }\n      });\n\n      if (leastRecentlyUsedKey) {\n        delete entries[leastRecentlyUsedKey];\n      }\n    }\n  }\n\n}\nImageUriCache._maximumEntries = 256;\nImageUriCache._entries = {};\nvar id = 0;\nvar requests = {};\nvar ImageLoader = {\n  abort(requestId) {\n    var image = requests[\"\" + requestId];\n\n    if (image) {\n      image.onerror = null;\n      image.onload = null;\n      image = null;\n      delete requests[\"\" + requestId];\n    }\n  },\n\n  getSize(uri, success, failure) {\n    var complete = false;\n    var interval = setInterval(callback, 16);\n    var requestId = ImageLoader.load(uri, callback, errorCallback);\n\n    function callback() {\n      var image = requests[\"\" + requestId];\n\n      if (image) {\n        var naturalHeight = image.naturalHeight,\n            naturalWidth = image.naturalWidth;\n\n        if (naturalHeight && naturalWidth) {\n          success(naturalWidth, naturalHeight);\n          complete = true;\n        }\n      }\n\n      if (complete) {\n        ImageLoader.abort(requestId);\n        clearInterval(interval);\n      }\n    }\n\n    function errorCallback() {\n      if (typeof failure === 'function') {\n        failure();\n      }\n\n      ImageLoader.abort(requestId);\n      clearInterval(interval);\n    }\n  },\n\n  has(uri) {\n    return ImageUriCache.has(uri);\n  },\n\n  load(uri, onLoad, onError) {\n    id += 1;\n    var image = new window.Image();\n    image.onerror = onError;\n\n    image.onload = e => {\n      // avoid blocking the main thread\n      var onDecode = () => onLoad({\n        nativeEvent: e\n      });\n\n      if (typeof image.decode === 'function') {\n        // Safari currently throws exceptions when decoding svgs.\n        // We want to catch that error and allow the load handler\n        // to be forwarded to the onLoad handler in this case\n        image.decode().then(onDecode, onDecode);\n      } else {\n        setTimeout(onDecode, 0);\n      }\n    };\n\n    image.src = uri;\n    requests[\"\" + id] = image;\n    return id;\n  },\n\n  prefetch(uri) {\n    return new Promise((resolve, reject) => {\n      ImageLoader.load(uri, () => {\n        // Add the uri to the cache so it can be immediately displayed when used\n        // but also immediately remove it to correctly reflect that it has no active references\n        ImageUriCache.add(uri);\n        ImageUriCache.remove(uri);\n        resolve();\n      }, reject);\n    });\n  },\n\n  queryCache(uris) {\n    var result = {};\n    uris.forEach(u => {\n      if (ImageUriCache.has(u)) {\n        result[u] = 'disk/memory';\n      }\n    });\n    return Promise.resolve(result);\n  }\n\n};\nexport default ImageLoader;"]},"metadata":{},"sourceType":"module"}